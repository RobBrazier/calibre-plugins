version: "3"

vars:
  PLUGINS:
    sh: "ls plugins"

includes:
  calibre:
    taskfile: .calibre
    dir: .calibre

tasks:
  list:
    desc: List all available tasks
    silent: true
    aliases: [default]
    cmd: "{{ .TASK_EXE }} -a"

  install:
    aliases: [i]
    desc: Install dependencies
    cmds:
      - uv sync --all-packages {{ .CLI_ARGS }}
      - task: hooks:install
      - task: calibre:source

  hooks:install:
    internal: true
    silent: true
    cmd: uv run lefthook install
    status:
      - test -e .git/hooks/pre-commit
      - test -e .git/hooks/commit-msg
      - grep -q lefthook .git/hooks/pre-commit
      - grep -q lefthook .git/hooks/commit-msg

  test:
    aliases: [t]
    desc: Run tests
    cmd: uv run pytest {{ .CLI_ARGS }}

  clean:
    aliases: [c]
    desc: Clean temporary / build files
    cmds:
      - find "{{ .ROOT_DIR }}" \( ! -regex '.*/\..*' \) -name 'dist' -type d | xargs -r -- rm -r
      - find "{{ .ROOT_DIR }}" -maxdepth 1 -name '.*cache' -type d | xargs -r -- rm -r
      - find "{{ .ROOT_DIR }}" -name '*pycache*' -type d | xargs -r -- rm -r

  package:
    desc: Package a plugin
    aliases: [bundle, build]
    vars:
      PLUGIN: '{{default "" .PLUGIN}}'
      TARGET_PLUGINS: '{{if .PLUGIN}}{{.PLUGIN}}{{else}}{{.PLUGINS | join " "}}{{end}}'
    preconditions:
      - sh: '{{if .PLUGIN}}[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]{{else}}true{{end}}'
        msg: "Invalid plugin name {{ .PLUGIN }} provided"
    dir: "{{ .ROOT_DIR }}"
    sources:
      - "{{ .ROOT_DIR }}/{plugins,lib}/**/*.py"
      - "{{ .ROOT_DIR }}/{plugins,lib}/**/pyproject.toml"
    generates:
      - "{{ .ROOT_DIR }}/dist/{{ .PLUGIN }}*.zip"
    cmds:
      - for: { var: TARGET_PLUGINS }
        cmd: bash scripts/bundle.sh {{ .ITEM }}

  install-plugin:
    desc: Install a single plugin (e.g. install:hardcover)
    vars:
      PLUGIN: '{{default "" .PLUGIN}}'
      TARGET_PLUGINS: "{{if .PLUGIN}}[{{.PLUGIN}}]{{else}}{{.PLUGINS}}{{end}}"
    preconditions:
      - sh: '{{if .PLUGIN}}[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]{{else}}true{{end}}'
        msg: "Invalid plugin name {{ .PLUGIN }} provided"
    cmds:
      - for: { var: TARGET_PLUGINS }
        task: package
        vars:
          PLUGIN:
            ref: .ITEM
      - for: { var: TARGET_PLUGINS }
        cmd: find "{{ .ROOT_DIR }}/dist" -name '{{ .ITEM }}*.zip' | xargs calibre-customize --add-plugin

  run:*:
    desc: Run a single plugin (e.g. run:hardcover)
    vars:
      PLUGIN: "{{ index .MATCH 0 }}"
    preconditions:
      - sh: '[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]'
        msg: "Invalid plugin name {{ .PLUGIN }} provided"
    cmds:
      - task: install-plugin
        vars:
          PLUGIN:
            ref: .PLUGIN
      - cmd: calibre-debug -r {{ .PLUGIN | title }} -- {{.CLI_ARGS}}

  cliff:
    # internal: true
    silent: true
    requires:
      vars:
        - PLUGIN
    cmd: git cliff --include-path 'plugins/{{.PLUGIN}}/**/*' --include-path 'libs/**/*' --tag-pattern '{{.PLUGIN}}-*' {{.CLI_ARGS}}

  bump:
    desc: Bump version for a plugin
    requires:
      vars:
        - PLUGIN
    vars:
      NEW_VERSION_SH:
        sh: "task cliff PLUGIN={{.PLUGIN}} -- --bumped-version"
      PREFIX: "{{.PLUGIN}}-"
      VERSION: "{{ .NEW_VERSION_SH | trimPrefix .PREFIX }}"
    prompt: "Version for {{.PLUGIN}} will be bumped to {{.VERSION}}"
    cmds:
      - echo "Bumping {{.PLUGIN}} to {{.VERSION}}"
      - SETUPTOOLS_SCM_PRETEND_VERSION_FOR_{{.PLUGIN | upper}}={{.VERSION}} uv lock --upgrade-package {{.PLUGIN}}
      - cmd: 'git commit -am "bump({{.PLUGIN}}): Update lock for {{.VERSION}}" || true'
      - cmd: "git tag -f {{.PLUGIN}}-{{.VERSION}}"
      - echo 'Run `git push && git push --tags` to Release'
    preconditions:
      - sh: '[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]'
        msg: "Invalid plugin {name {{ .PLUGIN }} provided"
