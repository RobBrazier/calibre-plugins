version: "3"

vars:
  PLUGINS:
    sh: "ls plugins"
  CALIBRE_HOME: "{{ .ROOT_DIR }}/.calibre"
  CALIBRE_VERSION: "7.21.0"

tasks:
  list:
    desc: List all available tasks
    silent: true
    aliases: [default]
    cmd: "{{ .TASK_EXE }} -a"

  install:
    aliases: [i]
    desc: Install dependencies
    cmds:
      - uv sync --all-packages {{ .CLI_ARGS }}
      - cmd: '[ -f "{{ .ROOT_DIR }}/.git/hooks/pre-commit" ] || uv run pre-commit install -t pre-commit -t commit-msg'
        silent: true
      - task: calibre:source

  test:
    aliases: [t]
    desc: Run tests
    cmd: uv run pytest {{ .CLI_ARGS }}

  clean:
    aliases: [c]
    desc: Clean temporary / build files
    cmds:
      - find "{{ .ROOT_DIR }}" \( ! -regex '.*/\..*' \) -name 'dist' -type d | xargs -r -- rm -r
      - find "{{ .ROOT_DIR }}" -maxdepth 1 -name '.*cache' -type d | xargs -r -- rm -r
      - find "{{ .ROOT_DIR }}" -name '*pycache*' -type d | xargs -r -- rm -r

  package:
    aliases: [build, p]
    desc: Package all plugins
    cmds:
      - for: { var: PLUGINS }
        task: "package:{{ .ITEM }}"

  package:*:
    desc: Package a single plugin (e.g. package:hardcover)
    vars:
      PLUGIN: "{{ index .MATCH 0 }}"
      PLUGIN_DIR: "{{ .ROOT_DIR }}/plugins/{{ .PLUGIN }}"
    cmds:
      - defer: rmdir "{{ .PLUGIN_DIR }}/dist" 2>/dev/null
      - mkdir -p "{{ .ROOT_DIR }}/dist"
      - uv --directory "{{ .PLUGIN_DIR }}" run hatch build -t zipped-directory
      - find "{{ .PLUGIN_DIR }}/dist" -type f -name '*.zip' | xargs -r -I {} mv -f "{}" "{{ .ROOT_DIR }}/dist/"
    sources:
      - "{{ .PLUGIN_DIR }}/**/pyproject.toml"
      - "{{ .PLUGIN_DIR }}/**/*.py"
      - "{{ .ROOT_DIR }}/src/**/*.py"
    generates:
      - "{{ .ROOT_DIR }}/dist/{{ .PLUGIN }}*.zip"
    preconditions:
      - sh: '[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]'
        msg: "Invalid plugin name {{ .PLUGIN }} provided"

  install:*:
    desc: Install a single plugin (e.g. install:hardcover)
    vars:
      PLUGIN: "{{ index .MATCH 0 }}"
      PLUGIN_NAME: "{{ index .MATCH 0 | title }}"
    deps:
      - "package:{{.PLUGIN}}"
    cmds:
      - for: { var: PLUGINS }
        cmd: find "{{ .ROOT_DIR }}/dist" -name '{{ .ITEM }}*.zip' | xargs calibre-customize --add-plugin
    preconditions:
      - sh: '[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]'
        msg: "Invalid plugin name {{ .PLUGIN }} provided"

  run:*:
    desc: Run a single plugin (e.g. run:hardcover)
    vars:
      PLUGIN: "{{ index .MATCH 0 }}"
      PLUGIN_NAME: "{{ index .MATCH 0 | title }}"
    deps:
      - "install:{{.PLUGIN}}"
    cmd: calibre-debug -r {{ .PLUGIN_NAME }} -- {{.CLI_ARGS}}
    preconditions:
      - sh: '[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]'
        msg: "Invalid plugin name {{ .PLUGIN }} provided"

  calibre:setup:
    desc: Setup Calibre for first use
    requires:
      vars:
        - CALIBRE_LIBRARY
    dir: "{{ .CALIBRE_HOME }}/temp"
    vars:
      BOOKS:
        - "1513.epub" # Romeo and Juliet
        - "345.epub" # Dracula
    cmds:
      - for: { var: BOOKS }
        cmd: wget "https://www.gutenberg.org/ebooks/{{ .ITEM }}.noimages" -O "{{ .ITEM }}"
      - defer: find "." -name "*.epub" | xargs -r rm
      - cmd: find "." -type f -name "*.epub" | xargs calibredb add --with-library {{ .CALIBRE_LIBRARY }}
      - cmd: calibre --with-library {{ .CALIBRE_LIBRARY }}

  calibre:run:
    desc: Start Calibre in Debug Mode
    cmd: calibre-debug -g -- {{.CLI_ARGS}}

  calibre:source:
    desc: Download Calibre source for IDE completion
    dir: "{{ .CALIBRE_HOME }}/lib"
    cmds:
      - wget -O - "https://github.com/kovidgoyal/calibre/archive/refs/tags/v{{ .CALIBRE_VERSION }}.tar.gz" | tar xz --strip-components=2 --wildcards '*/src/*'
    status:
      - test -d "{{ .CALIBRE_HOME }}/lib"

  version:*:
    desc: Bump version for a plugin
    vars:
      PLUGIN: "{{ index .MATCH 0 }}"
    cmd: uv run --directory "{{ .ROOT_DIR }}/plugins/{{ .PLUGIN }}" hatch version {{ .CLI_ARGS }}
    preconditions:
      - sh: '[ "{{ .PLUGINS | splitList "\n" | has .PLUGIN }}" == "true" ]'
        msg: "Invalid plugin {name {{ .PLUGIN }} provided"
